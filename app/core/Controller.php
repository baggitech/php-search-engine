<?php

namespace Fir\Controllers;

use Fir\Models;
use Fir\Views;
use Fir\Languages\Language as Language;

/**
 * Classe base para todos os controllers do sistema
 * Fornece métodos utilitários para carregar models, views e helpers
 */
class Controller {

    /**
     * The database connection
     * @var	object
     */
    public $db;

    /**
     * The site settings from the DB
     * @var	array
     */
    protected $settings;

    /**
     * The view object to be passed to the controllers
     * @var	object
     */
    protected $view;

    /**
     * The language array to be passed to the controllers and views
     * @var array
     */
    protected $lang;

    /**
     * The list of available languages
     * @var array
     */
    protected $languages;

    /**
     * User selected language
     * @var string
     */
    protected $language;

    /**
     * The current URL path (route) array to be passed to the controllers
     * @var array
     */
    protected $url;

    /**
     * Controller constructor.
     * @param $db
     */
    public function __construct($db, $url) {
        $this->db = $db;
        $this->url = $url;

        // Instancia o model principal para acessar configurações do site
        $model = new Models\Model($this->db);

        // Armazena as configurações do site
        $this->settings = $model->getSiteSettings();

        // Define o timezone do PHP conforme configuração do site
        if(!empty($this->settings['timezone'])) {
            date_default_timezone_set($this->settings['timezone']);
        }

        // Carrega configurações padrão do usuário (cookies, preferências, etc)
        $this->defaultUserSettings();

        // Instancia o sistema de idiomas e define o idioma padrão
        $language = new Language();
        $this->lang = $language->set($this->settings['site_language']);
        $this->languages = $language->languages;
        $this->language = $language->get();

        // Instancia o gerenciador de views
        $this->view = new Views\View($this->settings, $this->lang, $this->url);
    }

    /**
     * Get and instantiate the requested model
     *
     * @return	object
     */
    public function model($model) {
        // Inclui o arquivo do model solicitado
        require_once(__DIR__ . '/../models/' . $model . '.php');
        // Instancia a classe do model dinamicamente
        $class = 'Fir\\Models\\'.$model;
        return new $class($this->db);
    }

    /**
     * Output the final view to the user based on the request type
     *
     * @param   $data   array   The output generated by the controllers
     * @return	string
     */
    public function run($data = null) {
        // Se for uma requisição AJAX para o controller de requests
        if($this->url[0] == 'requests') {
            if(isAjax()) {
                // Retorna os dados em formato JSON
                echo json_encode($data);
            } else {
                // Se não for AJAX, redireciona para a home
                redirect();
            }
        } else {
            // Monta as views de header, content e footer
            $data['header_view'] = $this->getHeader();
            $data['content_view'] = $data['content'];
            $data['footer_view'] = $this->getFooter();
            $data['backgrounds'] = $this->getBackgrounds();
            if(isAjax()) {
                // Retorna apenas partes da página para AJAX
                echo json_encode(['title' => $this->view->docTitle(), 'header' => $data['header_view'], 'content' => $data['content_view'], 'footer' => $data['footer_view']]);
            } else {
                // Renderiza a página completa
                echo $this->view->render($data, 'wrapper');
            }
        }
    }

    private function getHeader() {
        // Monta o menu principal conforme as permissões/configurações
        if($this->settings['web_per_page'] > 0) {
            $data['menu'][] = ['web', false];
        }
        if($this->settings['images_per_page'] > 0) {
            $data['menu'][] = ['images', false];
        }
        if($this->settings['videos_per_page'] > 0) {
            $data['menu'][] = ['videos', false];
        }
        if($this->settings['news_per_page'] > 0) {
            $data['menu'][] = ['news', false];
        }
        // Marca o primeiro item como ativo por padrão
        $data['menu'][0][1] = true;
        // Monta o menu de preferências
        $data['site_menu'] = [
            'preferences' => [
                'language'  => [false],
                'theme'     => [false],
                'search'    => [false]
            ]
        ];
        // Prepara variáveis para a barra de busca
        $data['query'] = isset($_GET['q']) ? $_GET['q'] : '';
        if(isset($this->url[0]) && in_array($this->url[0], ['web', 'images', 'videos', 'news'])) {
            $data['top_bar'] = true;
            $data['query_path'] = $this->url[0];
            $data['autofocus'] = 0;
            $data['search_bar_view'] = $this->view->render($data, 'shared/search_bar');
        }
        return $this->view->render($data, 'shared/header');
    }

    private function getFooter() {
        // Busca páginas institucionais para o rodapé
        $footer = $this->model('Wrapper');
        $data['info_pages'] = $footer->getInfoPages();
        return $this->view->render($data, 'shared/footer');
    }

    /**
     * The Search menu
     *
     * @return  array
     */
    protected function getMenu() {
        // Monta o menu de busca (web, images, videos, news)
        $data['query'] = $_GET['q'];
        if($this->settings['web_per_page'] > 0) {
            $data['menu']['web'] = [false];
        }
        if($this->settings['images_per_page'] > 0) {
            $data['menu']['images'] = [false];
        }
        if($this->settings['videos_per_page'] > 0) {
            $data['menu']['videos'] = [false];
        }
        if($this->settings['news_per_page'] > 0) {
            $data['menu']['news'] = [false];
        }
        // Marca o item do menu correspondente à rota atual como ativo
        $data['menu'][$this->url[0]][0] = true;
        return $this->view->render($data, 'shared/search_menu');
    }

    /**
     * Returns a list of available backgrounds
     *
     * @return  array
     */
    protected function getBackgrounds() {
        // Retorna backgrounds configurados para o tema
        $data['backgrounds'] = [];
        if($this->settings['site_backgrounds']) {
            // Caminho correto para os backgrounds: public/uploads/backgrounds/
            $backgroundsPath = sprintf('%s/../../%s/%s/backgrounds/', __DIR__, PUBLIC_PATH, UPLOADS_PATH);
            if(is_dir($backgroundsPath)) {
                $files = scandir($backgroundsPath);
                foreach($files as $file) {
                    if($file != '.' && $file != '..' && pathinfo($file, PATHINFO_EXTENSION) == 'jpg') {
                        $data['backgrounds'][] = $file;
                    }
                }
            }
        }
        return $data['backgrounds'];
    }

    /**
     * Sets the backgrounds cookie if the settings allows it
     */
    protected function defaultUserSettings() {
        // Define configurações padrão do usuário (cookies, preferências visuais, etc)
        if(!isset($_COOKIE['highlight'])) {
            setcookie('highlight', 'true', time() + 365*24*60*60, '/');
        }
        if(!isset($_COOKIE['safe_search'])) {
            setcookie('safe_search', 'Moderate', time() + 365*24*60*60, '/');
        }
        if(!isset($_COOKIE['market'])) {
            setcookie('market', 'en-US', time() + 365*24*60*60, '/');
        }
        if(!isset($_COOKIE['backgrounds'])) {
            setcookie('backgrounds', 1, time() + 365*24*60*60, '/');
        }
        if(!isset($_COOKIE['dark_mode'])) {
            setcookie('dark_mode', 0, time() + 365*24*60*60, '/');
        }
        if(!isset($_COOKIE['center_content'])) {
            setcookie('center_content', 0, time() + 365*24*60*60, '/');
        }
        if(!isset($_COOKIE['new_window'])) {
            setcookie('new_window', 0, time() + 365*24*60*60, '/');
        }
    }
}